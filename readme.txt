Исходники для статьи https://habr.com/ru/articles/872776/


У нас был spring и hibernateМы твёрдо знали, что OAuth2.0 это хорошо, а принцип "Api first" ещё лучше.И нам дали ровно 48-ь часов чтобы создать работающую инфраструктуру с возможностями авторизации, отслеживания метрик, динамической маршрутизацией запросов и раздачей конфигураций сервисам "на лету". Кроме того от нас хотели получить "best practics" по работе с БД в коде и лёгкой поддержке ролевой модели.



Дорогой друг, представь что ты архитектор (а также бэк и немного фронт-разработчик в одном лице) и от тебя требуют создать полноценную систему связанных сервисов. Сегодня мы этим и займёмся начиная с создания проекта и заканчивая рекомендациями запуска нашей системы на прод-стенде.

В рамках данного репозитория созданы и увязаны в единую инрфаструктуру следующие проекты:

1. Сервис авторизации (AuthService) который будет по протоколу oauth 2.0 выдавать доступы к нашим приложениям.

2. Сервис конфигурации (SpringCloudConfig) который будет раздавать настройки всем нашим приложениям которым требуются настройки. Также он даст нам возможность обновлять настройки приложения без необходимости перезапускать само приложение и/или данный сервер конфигурации.

3. Гейтвей (SpringCloudGateway) который отвечает за пробрасывание запросов из условно не безопасной зоны в условно безопасную зону где расположены все остальные сервисы.

4. Сервис мониторинга (SpringBootAdminServer) предоставляющий простую систему мониторинга множества работающих сервисов.

5. Сервис-приложение 1 (WebApplication) представляющий собой обычный веб-сервис с доступом к БД и ручной авторизаций через сервер-авторизации.

6. Сервис-приложение 2 (WebSecurityApplication) представляющий собой обычный веб-сервис с авторизацией частично использующей механизмы spring security

7. Сервис-приложение 3 (WebGenerateApplication) не требующий авторизации, но зато демонстрирующий использование популярного при разработке принципа "api first" и автогенерации кода.